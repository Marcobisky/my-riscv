-- generated by Digital. Don't modify this file!
-- Any changes will be lost if this file is regenerated.

LIBRARY ieee;
USE ieee.std_logic_1164.all;

entity MUX_GATE_BUS_2 is
  generic ( Bits : integer ); 
  port (
    p_out: out std_logic_vector ((Bits-1) downto 0);
    sel: in std_logic_vector (1 downto 0);
    
    in_0: in std_logic_vector ((Bits-1) downto 0);
    in_1: in std_logic_vector ((Bits-1) downto 0);
    in_2: in std_logic_vector ((Bits-1) downto 0);
    in_3: in std_logic_vector ((Bits-1) downto 0) );
end MUX_GATE_BUS_2;

architecture Behavioral of MUX_GATE_BUS_2 is
begin
  with sel select
    p_out <=
      in_0 when "00",
      in_1 when "01",
      in_2 when "10",
      in_3 when "11",
      (others => '0') when others;
end Behavioral;


LIBRARY ieee;
USE ieee.std_logic_1164.all;


entity DIG_BitExtenderSingle is
  generic ( outputBits : integer); 
  port (
    p_in: in std_logic;
    p_out: out std_logic_vector ((outputBits-1) downto 0) );
end DIG_BitExtenderSingle;

architecture Behavioral of DIG_BitExtenderSingle is
begin
    p_out((outputBits-1) downto 0) <= (others => p_in);
end Behavioral;


LIBRARY ieee;
USE ieee.std_logic_1164.all;

entity MUX_GATE_BUS_3 is
  generic ( Bits : integer ); 
  port (
    p_out: out std_logic_vector ((Bits-1) downto 0);
    sel: in std_logic_vector (2 downto 0);
    
    in_0: in std_logic_vector ((Bits-1) downto 0);
    in_1: in std_logic_vector ((Bits-1) downto 0);
    in_2: in std_logic_vector ((Bits-1) downto 0);
    in_3: in std_logic_vector ((Bits-1) downto 0);
    in_4: in std_logic_vector ((Bits-1) downto 0);
    in_5: in std_logic_vector ((Bits-1) downto 0);
    in_6: in std_logic_vector ((Bits-1) downto 0);
    in_7: in std_logic_vector ((Bits-1) downto 0) );
end MUX_GATE_BUS_3;

architecture Behavioral of MUX_GATE_BUS_3 is
begin
  with sel select
    p_out <=
      in_0 when "000",
      in_1 when "001",
      in_2 when "010",
      in_3 when "011",
      in_4 when "100",
      in_5 when "101",
      in_6 when "110",
      in_7 when "111",
      (others => '0') when others;
end Behavioral;


LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.numeric_std.all;

entity main is
  port (
    in32: in std_logic_vector(31 downto 0);
    shift_byte: in std_logic_vector(1 downto 0);
    Direction: in std_logic; -- left (0) or right (1)
    mode: in std_logic_vector(1 downto 0); -- 00 -> rotate
                                           -- 01 -> logical
                                           -- 10 -> arithmic
    out32: out std_logic_vector(31 downto 0));
end main;

architecture Behavioral of main is
  signal inbyte0: std_logic_vector(7 downto 0);
  signal inbyte3: std_logic_vector(7 downto 0);
  signal inbyte2: std_logic_vector(7 downto 0);
  signal inbyte1: std_logic_vector(7 downto 0);
  signal s0: std_logic_vector(7 downto 0);
  signal s1: std_logic_vector(7 downto 0);
  signal s2: std_logic_vector(7 downto 0);
  signal s3: std_logic_vector(7 downto 0);
  signal out_rotate_left: std_logic_vector(31 downto 0);
  signal s4: std_logic_vector(7 downto 0);
  signal s5: std_logic_vector(7 downto 0);
  signal s6: std_logic_vector(7 downto 0);
  signal s7: std_logic_vector(7 downto 0);
  signal s8: std_logic_vector(7 downto 0);
  signal s9: std_logic_vector(7 downto 0);
  signal s10: std_logic_vector(7 downto 0);
  signal s11: std_logic_vector(7 downto 0);
  signal s12: std_logic_vector(7 downto 0);
  signal s13: std_logic_vector(7 downto 0);
  signal s14: std_logic_vector(7 downto 0);
  signal s15: std_logic_vector(7 downto 0);
  signal s16: std_logic_vector(7 downto 0);
  signal sign_byte: std_logic_vector(7 downto 0);
  signal s17: std_logic_vector(7 downto 0);
  signal s18: std_logic_vector(7 downto 0);
  signal s19: std_logic_vector(7 downto 0);
  signal s20: std_logic;
  signal out_rotate_right: std_logic_vector(31 downto 0);
  signal s21: std_logic_vector(31 downto 0);
  signal out_logic_right: std_logic_vector(31 downto 0);
  signal out_ari_right: std_logic_vector(31 downto 0);
  signal s22: std_logic_vector(2 downto 0);
begin
  s22(0) <= Direction;
  s22(2 downto 1) <= mode;
  inbyte0 <= in32(7 downto 0);
  inbyte1 <= in32(15 downto 8);
  inbyte2 <= in32(23 downto 16);
  inbyte3 <= in32(31 downto 24);
  gate0: entity work.MUX_GATE_BUS_2
    generic map (
      Bits => 8)
    port map (
      sel => shift_byte,
      in_0 => inbyte0,
      in_1 => inbyte3,
      in_2 => inbyte2,
      in_3 => inbyte1,
      p_out => s0);
  gate1: entity work.MUX_GATE_BUS_2
    generic map (
      Bits => 8)
    port map (
      sel => shift_byte,
      in_0 => inbyte1,
      in_1 => inbyte0,
      in_2 => inbyte3,
      in_3 => inbyte2,
      p_out => s1);
  gate2: entity work.MUX_GATE_BUS_2
    generic map (
      Bits => 8)
    port map (
      sel => shift_byte,
      in_0 => inbyte2,
      in_1 => inbyte1,
      in_2 => inbyte0,
      in_3 => inbyte3,
      p_out => s2);
  gate3: entity work.MUX_GATE_BUS_2
    generic map (
      Bits => 8)
    port map (
      sel => shift_byte,
      in_0 => inbyte3,
      in_1 => inbyte2,
      in_2 => inbyte1,
      in_3 => inbyte0,
      p_out => s3);
  gate4: entity work.MUX_GATE_BUS_2
    generic map (
      Bits => 8)
    port map (
      sel => shift_byte,
      in_0 => inbyte0,
      in_1 => inbyte1,
      in_2 => inbyte2,
      in_3 => inbyte3,
      p_out => s4);
  gate5: entity work.MUX_GATE_BUS_2
    generic map (
      Bits => 8)
    port map (
      sel => shift_byte,
      in_0 => inbyte1,
      in_1 => inbyte2,
      in_2 => inbyte3,
      in_3 => inbyte0,
      p_out => s5);
  gate6: entity work.MUX_GATE_BUS_2
    generic map (
      Bits => 8)
    port map (
      sel => shift_byte,
      in_0 => inbyte2,
      in_1 => inbyte3,
      in_2 => inbyte0,
      in_3 => inbyte1,
      p_out => s6);
  gate7: entity work.MUX_GATE_BUS_2
    generic map (
      Bits => 8)
    port map (
      sel => shift_byte,
      in_0 => inbyte3,
      in_1 => inbyte0,
      in_2 => inbyte1,
      in_3 => inbyte2,
      p_out => s7);
  gate8: entity work.MUX_GATE_BUS_2
    generic map (
      Bits => 8)
    port map (
      sel => shift_byte,
      in_0 => inbyte0,
      in_1 => "00000000",
      in_2 => "00000000",
      in_3 => "00000000",
      p_out => s8);
  gate9: entity work.MUX_GATE_BUS_2
    generic map (
      Bits => 8)
    port map (
      sel => shift_byte,
      in_0 => inbyte1,
      in_1 => inbyte0,
      in_2 => "00000000",
      in_3 => "00000000",
      p_out => s9);
  gate10: entity work.MUX_GATE_BUS_2
    generic map (
      Bits => 8)
    port map (
      sel => shift_byte,
      in_0 => inbyte2,
      in_1 => inbyte1,
      in_2 => inbyte0,
      in_3 => "00000000",
      p_out => s10);
  gate11: entity work.MUX_GATE_BUS_2
    generic map (
      Bits => 8)
    port map (
      sel => shift_byte,
      in_0 => inbyte3,
      in_1 => inbyte2,
      in_2 => inbyte1,
      in_3 => inbyte0,
      p_out => s11);
  gate12: entity work.MUX_GATE_BUS_2
    generic map (
      Bits => 8)
    port map (
      sel => shift_byte,
      in_0 => inbyte0,
      in_1 => inbyte1,
      in_2 => inbyte2,
      in_3 => inbyte3,
      p_out => s12);
  gate13: entity work.MUX_GATE_BUS_2
    generic map (
      Bits => 8)
    port map (
      sel => shift_byte,
      in_0 => inbyte1,
      in_1 => inbyte2,
      in_2 => inbyte3,
      in_3 => "00000000",
      p_out => s13);
  gate14: entity work.MUX_GATE_BUS_2
    generic map (
      Bits => 8)
    port map (
      sel => shift_byte,
      in_0 => inbyte2,
      in_1 => inbyte3,
      in_2 => "00000000",
      in_3 => "00000000",
      p_out => s14);
  gate15: entity work.MUX_GATE_BUS_2
    generic map (
      Bits => 8)
    port map (
      sel => shift_byte,
      in_0 => inbyte3,
      in_1 => "00000000",
      in_2 => "00000000",
      in_3 => "00000000",
      p_out => s15);
  gate16: entity work.MUX_GATE_BUS_2
    generic map (
      Bits => 8)
    port map (
      sel => shift_byte,
      in_0 => inbyte0,
      in_1 => inbyte1,
      in_2 => inbyte2,
      in_3 => inbyte3,
      p_out => s16);
  s20 <= inbyte3(7);
  out_rotate_left(7 downto 0) <= s0;
  out_rotate_left(15 downto 8) <= s1;
  out_rotate_left(23 downto 16) <= s2;
  out_rotate_left(31 downto 24) <= s3;
  gate17: entity work.DIG_BitExtenderSingle
    generic map (
      outputBits => 8)
    port map (
      p_in => s20,
      p_out => sign_byte);
  out_rotate_right(7 downto 0) <= s4;
  out_rotate_right(15 downto 8) <= s5;
  out_rotate_right(23 downto 16) <= s6;
  out_rotate_right(31 downto 24) <= s7;
  s21(7 downto 0) <= s8;
  s21(15 downto 8) <= s9;
  s21(23 downto 16) <= s10;
  s21(31 downto 24) <= s11;
  out_logic_right(7 downto 0) <= s12;
  out_logic_right(15 downto 8) <= s13;
  out_logic_right(23 downto 16) <= s14;
  out_logic_right(31 downto 24) <= s15;
  gate18: entity work.MUX_GATE_BUS_2
    generic map (
      Bits => 8)
    port map (
      sel => shift_byte,
      in_0 => inbyte1,
      in_1 => inbyte2,
      in_2 => inbyte3,
      in_3 => sign_byte,
      p_out => s17);
  gate19: entity work.MUX_GATE_BUS_2
    generic map (
      Bits => 8)
    port map (
      sel => shift_byte,
      in_0 => inbyte2,
      in_1 => inbyte3,
      in_2 => sign_byte,
      in_3 => sign_byte,
      p_out => s18);
  gate20: entity work.MUX_GATE_BUS_2
    generic map (
      Bits => 8)
    port map (
      sel => shift_byte,
      in_0 => inbyte3,
      in_1 => sign_byte,
      in_2 => sign_byte,
      in_3 => sign_byte,
      p_out => s19);
  out_ari_right(7 downto 0) <= s16;
  out_ari_right(15 downto 8) <= s17;
  out_ari_right(23 downto 16) <= s18;
  out_ari_right(31 downto 24) <= s19;
  gate21: entity work.MUX_GATE_BUS_3
    generic map (
      Bits => 32)
    port map (
      sel => s22,
      in_0 => out_rotate_left,
      in_1 => out_rotate_right,
      in_2 => s21,
      in_3 => out_logic_right,
      in_4 => s21,
      in_5 => out_ari_right,
      in_6 => "00000000000000000000000000000000",
      in_7 => "00000000000000000000000000000000",
      p_out => out32);
end Behavioral;
